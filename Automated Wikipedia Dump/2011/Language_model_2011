Language model
A statistical language model assigns a probability to a sequence of m words 



P
(

w

1


,
…
,

w

m


)


{\displaystyle P(w_{1},\ldots ,w_{m})}

 by means of a probability distribution.
Language modeling is used in many natural language processing applications such as speech recognition, machine translation, part-of-speech tagging, parsing and information retrieval.
In speech recognition and in data compression, such a model tries to capture the properties of a language, and to predict the next word in a speech sequence.
When used in information retrieval, a language model is associated with a document in a collection. With query Q as input, retrieved documents are ranked based on the probability that the document's language model would generate the terms of the query, P(Q|Md). The method to use language models in information retrieval is the query likelihood model.
In practice, unigram language models are most commonly used in information retrieval, as they are sufficient to determine the topic from a piece of text. Unigram models only calculate the probability of hitting an isolated word, without considering any influence from the words before or after the target. This leads to the Bag of words model, and turns out to generate a multinomial distribution over words.
Estimating the probability of sequences can become difficult in corpora, in which phrases or sentences can be arbitrarily long and hence some sequences are not observed during training of the language model (data sparseness problem of overfitting). For that reason these models are often approximated using smoothed N-gram models.

Contents
1 Unigram models
2 N-gram models

2.1 Example


2.1 Example
3 Other models
4 See also
5 References
6 External links

Unigram models
A unigram model used in information retrieval can be treated as the combination of a bunch of one-state finite automatons.[1] It splits the probabilities of different terms in a context, e.g. from 



P
(

t

1



t

2



t

3


)
=
P
(

t

1


)
P
(

t

2



|


t

1


)
P
(

t

3



|


t

1



t

2


)


{\displaystyle P(t_{1}t_{2}t_{3})=P(t_{1})P(t_{2}|t_{1})P(t_{3}|t_{1}t_{2})}

 to 




P

u
n
i


(

t

1



t

2



t

3


)
=
P
(

t

1


)
P
(

t

2


)
P
(

t

3


)


{\displaystyle P_{uni}(t_{1}t_{2}t_{3})=P(t_{1})P(t_{2})P(t_{3})}

.
In this model, the probability to hit each word all depends on its own, so we only have one-state finite automations as units. For each automation, we only have one way to hit its only state, assigned with one probability. Viewing from the whole model, the sum of all the one-state-hitting probabilities should be 1. Followed is an illustration of an unigram model of a document.





∑

t
e
r
m
 
i
n
 
d
o
c


P
(
t
e
r
m
)
=
1


{\displaystyle \sum _{term\ in\ doc}P(term)=1}


The probability generated for a specific query is calculated as




P
(
q
u
e
r
y
)
=

∏

t
e
r
m
 
i
n
 
q
u
e
r
y


P
(
t
e
r
m
)


{\displaystyle P(query)=\prod _{term\ in\ query}P(term)}


For different documents, we can build their own unigram models, with different hitting probabilities of words in it. And we use probabilities from different documents to generate different hitting probabilities for a query. Then we can rank documents for a query according to the generating probabilities. Next is an example of two unigram models of two documents.
In information retrieval contexts, unigram language models are often smoothed to avoid instances where 



P
(
t
e
r
m
)
=
0


{\displaystyle P(term)=0}

. A common approach is to generate a maximum-likelihood model for the entire collection and linearly interpolate the collection model with a maximum-likelihood model for each document to create a smoothed document model.[2]
N-gram models
In an n-gram model, the probability 



P
(

w

1


,
…
,

w

m


)


{\displaystyle P(w_{1},\ldots ,w_{m})}

 of observing the sentence w1,...,wm is approximated as




P
(

w

1


,
…
,

w

m


)
=

∏

i
=
1


m


P
(

w

i



|


w

1


,
…
,

w

i
−
1


)
≈

∏

i
=
1


m


P
(

w

i



|


w

i
−
(
n
−
1
)


,
…
,

w

i
−
1


)


{\displaystyle P(w_{1},\ldots ,w_{m})=\prod _{i=1}^{m}P(w_{i}|w_{1},\ldots ,w_{i-1})\approx \prod _{i=1}^{m}P(w_{i}|w_{i-(n-1)},\ldots ,w_{i-1})}


Here, it is assumed that the probability of observing the ith word wi in the context history of the preceding i-1 words can be approximated by the probability of observing it in the shortened context history of the preceding n-1 words (nth order Markov property).
The conditional probability can be calculated from n-gram frequency counts: 



P
(

w

i



|


w

i
−
(
n
−
1
)


,
…
,

w

i
−
1


)
=



c
o
u
n
t
(

w

i
−
(
n
−
1
)


,
…
,

w

i
−
1


,

w

i


)


c
o
u
n
t
(

w

i
−
(
n
−
1
)


,
…
,

w

i
−
1


)





{\displaystyle P(w_{i}|w_{i-(n-1)},\ldots ,w_{i-1})={\frac {count(w_{i-(n-1)},\ldots ,w_{i-1},w_{i})}{count(w_{i-(n-1)},\ldots ,w_{i-1})}}}


The words bigram and trigram language model denote n-gram language models with n=2 and n=3, respectively.
Typically, however, the n-gram probabilities are not derived directly from the frequency counts, because models derived this way have severe problems when confronted with any n-grams that have not explicitly been seen before. Instead, some form of smoothing is necessary, assigning some of the total probability mass to unseen words or N-grams. Various methods are used, from simple "add-one" smoothing (assign a count of 1 to unseen N-grams) to more sophisticated models, such as Good-Turing discounting or back-off models.
Example
In a bigram (n=2) language model, the probability of the sentence I saw the red house is approximated as




P
(
I
,
s
a
w
,
t
h
e
,
r
e
d
,
h
o
u
s
e
)
≈
P
(
I

|

<
s
>
)
P
(
s
a
w

|

I
)
P
(
t
h
e

|

s
a
w
)
P
(
r
e
d

|

t
h
e
)
P
(
h
o
u
s
e

|

r
e
d
)
P
(
<

/

s
>

|

h
o
u
s
e
)


{\displaystyle P(I,saw,the,red,house)\approx P(I|<s>)P(saw|I)P(the|saw)P(red|the)P(house|red)P(</s>|house)}


whereas in a trigram (n=3) language model, the approximation is




P
(
I
,
s
a
w
,
t
h
e
,
r
e
d
,
h
o
u
s
e
)
≈
P
(
I

|

<
s
>
,
<
s
>
)
P
(
s
a
w

|

<
s
>
,
I
)
P
(
t
h
e

|

I
,
s
a
w
)
P
(
r
e
d

|

s
a
w
,
t
h
e
)
P
(
h
o
u
s
e

|

t
h
e
,
r
e
d
)
P
(
<

/

s
>

|

r
e
d
,
h
o
u
s
e
)


{\displaystyle P(I,saw,the,red,house)\approx P(I|<s>,<s>)P(saw|<s>,I)P(the|I,saw)P(red|saw,the)P(house|the,red)P(</s>|red,house)}


Note that the context of the first 



n
−
1


{\displaystyle n-1}

 N-grams is filled with start-of-sentence markers, typically denoted <s>.
Additionally, without an end-of-sentence marker, the probability of an ungrammatical sequence *I saw the would always be higher than that of the longer sentence I saw the red house.
Other models
A positional language model[3] is one that describes the probability of given words occurring close to one another in a text, not necessarily immediately adjacent.
See also
Factored language model
Cache language model
Katz's back-off model
References
^ Christopher D. Manning, Prabhakar Raghavan, Hinrich Schütze: An Introduction to Information Retrieval, pages 237-240. Cambridge University Press, 2009
^ Buttcher, Clarke, and Cormack. Information Retrieval: Implementing and Evaluating Search Engines. pg. 289-291. MIT Press.
^ Yuanhua Lv and ChengXiang Zhai, Positional Language Models for Information Retrieval, in Proceedings of the 32nd international ACM SIGIR conference on Research and development in information retrieval (SIGIR), 2009.
J M Ponte and W B Croft (1998). "A Language Modeling Approach to Information Retrieval". Research and Development in Information Retrieval. pp. 275–281. 
F Song and W B Croft (1999). "A General Language Model for Information Retrieval". Research and Development in Information Retrieval. pp. 279–280. 
External links
Language models trained on newswire data

